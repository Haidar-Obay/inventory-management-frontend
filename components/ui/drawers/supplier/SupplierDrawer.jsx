"use client";

import React, { useState, useEffect, useMemo, useCallback } from "react";
import { Box } from "@mui/material";
import DynamicDrawer from "@/components/ui/DynamicDrawer";
import { useTranslations, useLocale } from "next-intl";
import { useSimpleToast } from "@/components/ui/simple-toast";
import { createSupplier, editSupplier } from "@/API/Suppliers";
import { getCountries, getZones, getCities, getDistricts } from "@/API/AddressCodes";
import PersonalInformationSection from "./PersonalInformationSection";
import BillingAddressSection from "./BillingAddressSection";
import ShippingAddressSection from "./ShippingAddressSection";
import BusinessInformationSection from "./BusinessInformationSection";
import { useShippingAddresses } from "./shared/useAddressManagement";

// Constants
const INITIAL_FORM_DATA = {
  // Personal info fields
  title: "",
  first_name: "",
  middle_name: "",
  last_name: "",
  display_name: "",
  company_name: "",
  phone1: "",
  phone2: "",
  phone3: "",
  active: true,
  // Billing address fields
  billing_country_id: "",
  billing_city_id: "",
  billing_district_id: "",
  billing_zone_id: "",
  billing_address_line1: "",
  billing_address_line2: "",
  billing_building: "",
  billing_block: "",
  billing_floor: "",
  billing_side: "",
  billing_apartment: "",
  billing_zip_code: "",
  // Shipping address fields
  shipping_country_id: "",
  shipping_city_id: "",
  shipping_district_id: "",
  shipping_zone_id: "",
  shipping_address_line1: "",
  shipping_address_line2: "",
  shipping_building: "",
  shipping_block: "",
  shipping_floor: "",
  shipping_side: "",
  shipping_apartment: "",
  shipping_zip_code: "",
  // Additional shipping addresses
  shipping_addresses: [],
  // Business information fields
  file_number: "",
  barcode: "",
  search_terms: []
};

const SupplierDrawer = React.memo(({
  isOpen,
  onClose,
  type,
  formData: externalFormData,
  isEdit = false,
}) => {
  const t = useTranslations("suppliers");
  const tToast = useTranslations("toast");
  const locale = useLocale();
  const isRTL = locale === "ar";
  const { addToast } = useSimpleToast();

  // State
  const [formData, setFormData] = useState(INITIAL_FORM_DATA);
  const [originalData, setOriginalData] = useState({});
  const [saveLoading, setSaveLoading] = useState(false);
  const [autoGenerateDisplayName, setAutoGenerateDisplayName] = useState(true);
  
  // Location data state
  const [countries, setCountries] = useState([]);
  const [zones, setZones] = useState([]);
  const [cities, setCities] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [locationLoading, setLocationLoading] = useState(false);
  
  // Accordion state management
  const [expandedSections, setExpandedSections] = useState({});
  const [allCollapsed, setAllCollapsed] = useState(false);

  // Shipping addresses management using custom hook
  const {
    shippingAddresses,
    setShippingAddresses,
    handleAddShippingAddress,
    handleRemoveShippingAddress,
    handleShippingAddressChange,
    handleCopyToShippingAddress,
    handleCopyFromBillingAddress
  } = useShippingAddresses(formData, setFormData);

  // Business information state
  const [searchTerms, setSearchTerms] = useState([]);
  const [newSearchTerm, setNewSearchTerm] = useState("");

  // Initialize form data when drawer opens
  useEffect(() => {
    if (isOpen) {
      if (isEdit && externalFormData) {
        const data = { ...INITIAL_FORM_DATA, ...externalFormData };
        setFormData(data);
        setOriginalData(JSON.parse(JSON.stringify(data)));
        setAutoGenerateDisplayName(false); // Don't auto-generate for edit mode initially
        
        // Initialize search terms
        if (data.search_terms && Array.isArray(data.search_terms)) {
          setSearchTerms(data.search_terms);
        } else {
          setSearchTerms([]);
        }
      } else {
        setFormData(INITIAL_FORM_DATA);
        setOriginalData(INITIAL_FORM_DATA);
        setAutoGenerateDisplayName(true);
        setSearchTerms([]);
      }
      
      // Initialize accordion sections as collapsed
      setExpandedSections({
        personalInfo: true,  // Personal info stays expanded
        billingAddress: false, // Billing address starts collapsed
        shippingAddress: false, // Shipping address starts collapsed
        businessInfo: false // Business info starts collapsed
      });
      setAllCollapsed(false);
    }
  }, [isOpen, isEdit, externalFormData]);

  // Handle accordion section changes
  const handleAccordionChange = useCallback((section) => (event, isExpanded) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: isExpanded
    }));
  }, []);

  // Handle collapse all
  const handleCollapseAll = useCallback(() => {
    setExpandedSections({
      personalInfo: false,
      billingAddress: false,
      shippingAddress: false,
      businessInfo: false
    });
    setAllCollapsed(true);
  }, []);

  // Fetch location data when drawer opens
  useEffect(() => {
    if (isOpen) {
      fetchLocationData();
    }
  }, [isOpen]);

  // Fetch location data
  const fetchLocationData = useCallback(async () => {
    setLocationLoading(true);
    try {
      const [countriesData, zonesData, citiesData, districtsData] = await Promise.all([
        getCountries(),
        getZones(),
        getCities(),
        getDistricts()
      ]);

      if (countriesData?.status) setCountries(countriesData.data || []);
      if (zonesData?.status) setZones(zonesData.data || []);
      if (citiesData?.status) setCities(citiesData.data || []);
      if (districtsData?.status) setDistricts(districtsData.data || []);
    } catch (error) {
      console.error('Error fetching location data:', error);
    } finally {
      setLocationLoading(false);
    }
  }, []);

  // Sync shipping addresses when they change
  useEffect(() => {
    if (shippingAddresses.length > 0) {
      // First address becomes primary shipping address
      const primaryAddress = shippingAddresses[0];
      const updatedFormData = {
        ...formData,
        shipping_country_id: primaryAddress.country_id || "",
        shipping_zone_id: primaryAddress.zone_id || "",
        shipping_city_id: primaryAddress.city_id || "",
        shipping_district_id: primaryAddress.district_id || "",
        shipping_address_line1: primaryAddress.address_line1 || "",
        shipping_address_line2: primaryAddress.address_line2 || "",
        shipping_building: primaryAddress.building || "",
        shipping_block: primaryAddress.block || "",
        shipping_floor: primaryAddress.floor || "",
        shipping_side: primaryAddress.side || "",
        shipping_apartment: primaryAddress.apartment || "",
        shipping_zip_code: primaryAddress.zip_code || "",
        shipping_addresses: shippingAddresses
      };
      setFormData(updatedFormData);
    }
  }, [shippingAddresses]);

  // Sync search terms when they change
  useEffect(() => {
    if (searchTerms.length > 0) {
      setFormData(prev => ({
        ...prev,
        search_terms: searchTerms
      }));
    }
  }, [searchTerms]);

  // Business information handlers
  const handleAddSearchTerm = useCallback(() => {
    if (newSearchTerm.trim() && !searchTerms.includes(newSearchTerm.trim())) {
      const newSearchTerms = [...searchTerms, newSearchTerm.trim()];
      setSearchTerms(newSearchTerms);
      setFormData(prev => ({ ...prev, search_terms: newSearchTerms }));
      setNewSearchTerm("");
    }
  }, [newSearchTerm, searchTerms]);

  const handleRemoveSearchTerm = useCallback((termToRemove) => {
    const newSearchTerms = searchTerms.filter(term => term !== termToRemove);
    setSearchTerms(newSearchTerms);
    setFormData(prev => ({ ...prev, search_terms: newSearchTerms }));
  }, [searchTerms]);

  const handleSearchTermKeyPress = useCallback((event) => {
    if (event.key === 'Enter') {
      event.preventDefault();
      handleAddSearchTerm();
    }
  }, [handleAddSearchTerm]);

  // Auto-generate display name when name fields change
  useEffect(() => {
    if (autoGenerateDisplayName) {
      const { title, first_name, middle_name, last_name } = formData;
      let generatedName = "";
      
      if (first_name && last_name) {
        generatedName = `${first_name} ${last_name}`;
        if (title) {
          generatedName = `${title} ${generatedName}`;
        }
        if (middle_name) {
          generatedName = `${first_name} ${middle_name} ${last_name}`;
          if (title) {
            generatedName = `${title} ${first_name} ${middle_name} ${last_name}`;
          }
        }
      } else if (first_name) {
        generatedName = first_name;
        if (title) {
          generatedName = `${title} ${first_name}`;
        }
      } else if (last_name) {
        generatedName = last_name;
        if (title) {
          generatedName = `${title} ${last_name}`;
        }
      }
      
      if (generatedName && generatedName !== formData.display_name) {
        setFormData(prev => ({
          ...prev,
          display_name: generatedName
        }));
      }
    }
  }, [formData.title, formData.first_name, formData.middle_name, formData.last_name, autoGenerateDisplayName, formData.display_name]);

  // Form handlers
  const handleFormDataChange = useCallback((field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // If user manually changes display name, disable auto-generation
    if (field === 'display_name') {
      setAutoGenerateDisplayName(false);
    }
  }, []);

  const handleFieldChange = useCallback((field) => (event) => {
    const value = event.target.value;
    handleFormDataChange(field, value);
    
    // Re-enable auto-generation when name fields are changed
    if (['title', 'first_name', 'middle_name', 'last_name'].includes(field)) {
      setAutoGenerateDisplayName(true);
    }
  }, [handleFormDataChange]);

  const handleDisplayNameChange = useCallback((event, newValue) => {
    handleFormDataChange("display_name", newValue || "");
    setAutoGenerateDisplayName(false); // Disable auto-generation when user manually changes
  }, [handleFormDataChange]);

  // Display name suggestions
  const displayNameSuggestions = useMemo(() => {
    const { title, first_name, middle_name, last_name, company_name } = formData;
    const suggestions = [];

    if (first_name && last_name) {
      suggestions.push(`${first_name} ${last_name}`);
      if (title) suggestions.push(`${title} ${first_name} ${last_name}`);
      if (middle_name) {
        suggestions.push(`${first_name} ${middle_name} ${last_name}`);
        if (title) suggestions.push(`${title} ${first_name} ${middle_name} ${last_name}`);
      }
    }

    if (first_name) {
      suggestions.push(first_name);
      if (title) suggestions.push(`${title} ${first_name}`);
    }

    if (last_name) {
      suggestions.push(last_name);
      if (title) suggestions.push(`${title} ${last_name}`);
    }

    if (company_name) {
      suggestions.push(company_name);
    }

    return suggestions.filter((suggestion, index, array) => 
      array.indexOf(suggestion) === index && suggestion.trim() !== ""
    );
  }, [formData.title, formData.first_name, formData.middle_name, formData.last_name, formData.company_name]);

  // Data change detection
  const hasDataChanged = useCallback(() => {
    if (!isEdit) {
      return Object.values(formData).some(value => 
        value !== "" && value !== true && value !== null && value !== undefined
      );
    }
    return JSON.stringify(formData) !== JSON.stringify(originalData);
  }, [formData, originalData, isEdit]);

  // Title generation
  const getTitle = useCallback(() => {
    if (isEdit) {
      return type === "edit" ? "Edit Supplier" : "View Supplier";
    }
    return "New Supplier";
  }, [isEdit, type]);

  // Toast helpers
  const showErrorToast = useCallback((message) => {
    addToast({
      type: "error",
      title: tToast("error"),
      description: message,
      duration: 3000,
    });
  }, [addToast, tToast]);

  const showSuccessToast = useCallback((message) => {
    addToast({
      type: "success",
      title: tToast("success"),
      description: message,
      duration: 3000,
    });
  }, [addToast, tToast]);

  // Core save logic
  const performSave = useCallback(async (onSuccess) => {
    if (isEdit && !hasDataChanged()) {
      showErrorToast("Please modify at least one field before saving.");
      return;
    }

    if (saveLoading) return;

    try {
      setSaveLoading(true);
      let response;

      if (isEdit) {
        response = await editSupplier(formData.id, formData);
      } else {
        response = await createSupplier(formData);
      }

      if (response && response.status) {
        showSuccessToast(tToast(isEdit ? "updateSuccess" : "createSuccess"));
        
        if (isEdit) {
          setOriginalData(JSON.parse(JSON.stringify(formData)));
        }
        
        onSuccess(response.data);
      } else {
        showErrorToast(response?.message || tToast(isEdit ? "updateError" : "createError"));
      }
    } catch (error) {
      showErrorToast(error.message || tToast(isEdit ? "updateError" : "createError"));
    } finally {
      setSaveLoading(false);
    }
  }, [formData, isEdit, hasDataChanged, saveLoading, showErrorToast, showSuccessToast, tToast, editSupplier, createSupplier]);

  // Save handlers
  const handleSave = useCallback(async () => {
    await performSave(() => {});
  }, [performSave]);

  const handleSaveAndNew = useCallback(async () => {
    await performSave((responseData) => {
      if (!isEdit) {
        setFormData(INITIAL_FORM_DATA);
        setOriginalData(INITIAL_FORM_DATA);
        setAutoGenerateDisplayName(true);
      }
    });
  }, [performSave, isEdit]);

  const handleSaveAndClose = useCallback(async () => {
    await performSave(() => onClose());
  }, [performSave, onClose]);

  // Content
  const content = (
    <Box sx={{ p: 2 }}>
      <PersonalInformationSection
        formData={formData}
        onFormDataChange={handleFormDataChange}
        isRTL={isRTL}
        t={t}
        expanded={expandedSections.personalInfo}
        onAccordionChange={handleAccordionChange('personalInfo')}
        generateDisplayNameSuggestions={() => displayNameSuggestions}
        handleDisplayNameChange={handleDisplayNameChange}
        handleFieldChange={handleFieldChange}
      />
      
      <BillingAddressSection
        formData={formData}
        onFormDataChange={handleFormDataChange}
        isRTL={isRTL}
        t={t}
        countries={countries}
        setCountries={setCountries}
        zones={zones}
        setZones={setZones}
        cities={cities}
        setCities={setCities}
        districts={districts}
        setDistricts={setDistricts}
        loading={locationLoading}
        expanded={expandedSections.billingAddress}
        onAccordionChange={handleAccordionChange('billingAddress')}
        allCollapsed={allCollapsed}
        setAllCollapsed={setAllCollapsed}
      />

      <ShippingAddressSection
        formData={formData}
        onFormDataChange={handleFormDataChange}
        isRTL={isRTL}
        t={t}
        countries={countries}
        setCountries={setCountries}
        zones={zones}
        setZones={setZones}
        cities={cities}
        setCities={setCities}
        districts={districts}
        setDistricts={setDistricts}
        loading={locationLoading}
        shippingAddresses={shippingAddresses}
        setShippingAddresses={setShippingAddresses}
        handleCopyFromBillingAddress={handleCopyFromBillingAddress}
        handleAddShippingAddress={handleAddShippingAddress}
        handleRemoveShippingAddress={handleRemoveShippingAddress}
        handleShippingAddressChange={handleShippingAddressChange}
        handleCopyToShippingAddress={handleCopyToShippingAddress}
        expanded={expandedSections.shippingAddress}
        onAccordionChange={handleAccordionChange('shippingAddress')}
        allCollapsed={allCollapsed}
        setAllCollapsed={setAllCollapsed}
      />

      <BusinessInformationSection
        formData={formData}
        onFormDataChange={handleFormDataChange}
        isRTL={isRTL}
        t={t}
        searchTerms={searchTerms}
        newSearchTerm={newSearchTerm}
        setNewSearchTerm={setNewSearchTerm}
        handleAddSearchTerm={handleAddSearchTerm}
        handleRemoveSearchTerm={handleRemoveSearchTerm}
        handleSearchTermKeyPress={handleSearchTermKeyPress}
        expanded={expandedSections.businessInfo}
        onAccordionChange={handleAccordionChange('businessInfo')}
        allCollapsed={allCollapsed}
        setAllCollapsed={setAllCollapsed}
      />
    </Box>
  );

  return (
    <DynamicDrawer
      isOpen={isOpen}
      onClose={onClose}
      title={getTitle()}
      content={content}
      onSave={handleSave}
      onSaveAndNew={handleSaveAndNew}
      onSaveAndClose={handleSaveAndClose}
      anchor="right"
      width={1200}
      hasDataChanged={hasDataChanged()}
      saveLoading={saveLoading}
      isEdit={isEdit}
    />
  );
});

export default SupplierDrawer;
